In the previus example, the data for our calculations were members of a
derived data type Matrix_Type.  The data was transferred from the "host"
to the "device" with global functions Copy_To_Device, Create_On_Device,
etc. Computations too were done by a global function Compute_On_DeviceBut.

Here we make a step further and give the new data type (Matrix_Type), the
ability to trasfer its data members to the "device" with its own member
functions (Copy_To_Device, Create_On_Device, ..., Copy_From_Device).

(The philosophy here was that if was the most convenient to write the data
transfer functions close to the data itself.  Althoug that is undeniably
true, it might not be the most economical way to transfer data to device
because we might not need all data members on "device", and it was even-
tually abandoned in the bigger project in the directory Sources.)

Another change to the previous step is that calculations are done in a
different module, called Compute_Mod, which brings the new type Compute_
Type, and which also create a singleton object called Global, indicating
that it is accessible to the rest of the code.

This step also brings, several source files to the project.  We have the
main function (this one) still, but each module is defined in its own
source file for the module definition, and sources in its sub-directories
for member functions (the same practice was introduced in T-Flows many
years back, and it is still proving to be useful.

The program is compiled with the script "compile.sh" and it requires Nvidia's
Fortran compiler, which comes with Nvidia HPC-SDK.  The script will create
two execatublas: the With_Gpu which uses GPUs and No_Gpu which doesn't use
GPUs.


